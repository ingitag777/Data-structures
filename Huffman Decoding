import java.util.*;
 
abstract class Node implements Comparable<Node> {
    
  	public  int frequency; // the frequency of this tree
    public  char data;
    public  Node left, right; 
    public Node(int freq) { 
    	frequency = freq;
   	}
 
    // compares on the frequency
    public int compareTo(Node tree) {
        return frequency - tree.frequency;
    }
  
}
 
class HuffmanLeaf extends Node {
    
    public HuffmanLeaf(int freq, char val) {
        super(freq);
        data = val;
    }
  
}
 
class HuffmanNode extends Node {
    
    public HuffmanNode(Node l, Node r) {
        super(l.frequency + r.frequency);
        left = l;
        right = r;
    }

}


class Decoding {


    void decode(String s, Node root) {
       Node temp=root;
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='0')
            {
                temp=temp.left;
                if(temp.left==null && temp.right==null)
                {
                    System.out.print(temp.data);
                    temp=root;
                }
            }
            if(s.charAt(i)=='1')
            {
                temp=temp.right;
                if(temp.right==null && temp.left==null)
                {
                    System.out.print(temp.data);
                    temp=root;
                }
            } 
        }        

    }

